//
//  WeatherWeatherLangTests-WeatherWeatherLangMocks.generated.swift
//  WeatherWeatherLang
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

// swiftlint:disable all

@testable import Mockingbird
@testable import WeatherWeatherLang
import Foundation
import Lottie
import Swift
import SwiftData
import SwiftUI
import Swinject
import UIKit

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked OpenMeteoRepository
public final class OpenMeteoRepositoryMock: WeatherWeatherLang.OpenMeteoRepository, Mockingbird.Mock {
  typealias MockingbirdSupertype = WeatherWeatherLang.OpenMeteoRepository
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "WeatherWeatherLang"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    OpenMeteoRepositoryMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getWeather`(`request`: WeatherWeatherLang.WeatherRequest)
  public func `getWeather`(`request`: WeatherWeatherLang.WeatherRequest) async throws -> WeatherWeatherLang.WeatherForecastResponse {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getWeather`(`request`: WeatherWeatherLang.WeatherRequest) async throws -> WeatherWeatherLang.WeatherForecastResponse", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`request`)], returnType: Swift.ObjectIdentifier((WeatherWeatherLang.WeatherForecastResponse).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (WeatherWeatherLang.WeatherRequest) async throws -> WeatherWeatherLang.WeatherForecastResponse { return try await mkbImpl(`request`) }
      if let mkbImpl = mkbImpl as? () async throws -> WeatherWeatherLang.WeatherForecastResponse { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: WeatherWeatherLang.WeatherForecastResponse = try await mkbObject.`getWeather`(request: `request`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (WeatherWeatherLang.WeatherForecastResponse).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getWeather`(`request`: @autoclosure () -> WeatherWeatherLang.WeatherRequest) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (WeatherWeatherLang.WeatherRequest) async throws -> WeatherWeatherLang.WeatherForecastResponse, WeatherWeatherLang.WeatherForecastResponse> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (WeatherWeatherLang.WeatherRequest) async throws -> WeatherWeatherLang.WeatherForecastResponse, WeatherWeatherLang.WeatherForecastResponse>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getWeather`(`request`: WeatherWeatherLang.WeatherRequest) async throws -> WeatherWeatherLang.WeatherForecastResponse", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`request`)], returnType: Swift.ObjectIdentifier((WeatherWeatherLang.WeatherForecastResponse).self)))
  }
}

/// Returns a concrete mock of `OpenMeteoRepository`.
public func mock(_ type: WeatherWeatherLang.OpenMeteoRepository.Protocol, file: StaticString = #file, line: UInt = #line) -> OpenMeteoRepositoryMock {
  return OpenMeteoRepositoryMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked WeatherForecastProtocol
public final class WeatherForecastProtocolMock: WeatherWeatherLang.WeatherForecastProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = WeatherWeatherLang.WeatherForecastProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "WeatherWeatherLang"])

  // MARK: Mocked current
  public var `current`: WeatherWeatherLang.Current? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "current.getter", setterSelectorName: "current.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((WeatherWeatherLang.Current?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> WeatherWeatherLang.Current? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as WeatherWeatherLang.Current? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: WeatherWeatherLang.Current? = mkbObject.`current`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (WeatherWeatherLang.Current?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getCurrent() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> WeatherWeatherLang.Current?, WeatherWeatherLang.Current?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> WeatherWeatherLang.Current?, WeatherWeatherLang.Current?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "current.getter", setterSelectorName: "current.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((WeatherWeatherLang.Current?).self)))
  }

  // MARK: Mocked currentUnits
  public var `currentUnits`: WeatherWeatherLang.Current? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "currentUnits.getter", setterSelectorName: "currentUnits.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((WeatherWeatherLang.Current?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> WeatherWeatherLang.Current? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as WeatherWeatherLang.Current? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: WeatherWeatherLang.Current? = mkbObject.`currentUnits`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (WeatherWeatherLang.Current?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getCurrentUnits() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> WeatherWeatherLang.Current?, WeatherWeatherLang.Current?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> WeatherWeatherLang.Current?, WeatherWeatherLang.Current?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "currentUnits.getter", setterSelectorName: "currentUnits.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((WeatherWeatherLang.Current?).self)))
  }

  // MARK: Mocked elevation
  public var `elevation`: Int? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "elevation.getter", setterSelectorName: "elevation.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((Int?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> Int? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as Int? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: Int? = mkbObject.`elevation`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Int?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getElevation() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Int?, Int?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Int?, Int?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "elevation.getter", setterSelectorName: "elevation.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((Int?).self)))
  }

  // MARK: Mocked generationTime
  public var `generationTime`: String? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "generationTime.getter", setterSelectorName: "generationTime.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> String? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as String? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: String? = mkbObject.`generationTime`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (String?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getGenerationTime() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String?, String?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String?, String?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "generationTime.getter", setterSelectorName: "generationTime.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String?).self)))
  }

  // MARK: Mocked latitude
  public var `latitude`: Double {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "latitude.getter", setterSelectorName: "latitude.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((Double).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> Double { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as Double }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: Double = mkbObject.`latitude`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Double).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getLatitude() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Double, Double> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Double, Double>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "latitude.getter", setterSelectorName: "latitude.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((Double).self)))
  }

  // MARK: Mocked longitude
  public var `longitude`: Double {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "longitude.getter", setterSelectorName: "longitude.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((Double).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> Double { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as Double }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: Double = mkbObject.`longitude`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Double).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getLongitude() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Double, Double> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Double, Double>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "longitude.getter", setterSelectorName: "longitude.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((Double).self)))
  }

  // MARK: Mocked timezone
  public var `timezone`: String? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "timezone.getter", setterSelectorName: "timezone.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> String? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as String? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: String? = mkbObject.`timezone`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (String?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getTimezone() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String?, String?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String?, String?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "timezone.getter", setterSelectorName: "timezone.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String?).self)))
  }

  // MARK: Mocked timezoneAbbreviation
  public var `timezoneAbbreviation`: String? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "timezoneAbbreviation.getter", setterSelectorName: "timezoneAbbreviation.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> String? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as String? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: String? = mkbObject.`timezoneAbbreviation`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (String?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getTimezoneAbbreviation() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String?, String?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String?, String?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "timezoneAbbreviation.getter", setterSelectorName: "timezoneAbbreviation.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String?).self)))
  }

  // MARK: Mocked utcOffset
  public var `utcOffset`: String? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "utcOffset.getter", setterSelectorName: "utcOffset.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> String? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as String? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: String? = mkbObject.`utcOffset`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (String?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getUtcOffset() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String?, String?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String?, String?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "utcOffset.getter", setterSelectorName: "utcOffset.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String?).self)))
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    WeatherForecastProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `WeatherForecastProtocol`.
public func mock(_ type: WeatherWeatherLang.WeatherForecastProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> WeatherForecastProtocolMock {
  return WeatherForecastProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
